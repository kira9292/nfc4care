# Script PowerShell pour corriger le probl√®me de stockage des tokens
Write-Host "üîß Correction du probl√®me de stockage des tokens..." -ForegroundColor Green

# Arr√™ter le frontend s'il tourne
Write-Host "üõë Arr√™t du frontend en cours..." -ForegroundColor Yellow
try {
    # Chercher le processus Node.js qui tourne sur le port 5173
    $nodeProcess = Get-NetTCPConnection -LocalPort 5173 -ErrorAction SilentlyContinue | 
                   Where-Object { $_.State -eq "Listen" } | 
                   ForEach-Object { Get-Process -Id $_.OwningProcess -ErrorAction SilentlyContinue } |
                   Where-Object { $_.ProcessName -eq "node" }
    
    if ($nodeProcess) {
        Write-Host "‚úÖ Processus Node.js trouv√©, arr√™t en cours..." -ForegroundColor Green
        Stop-Process -Id $nodeProcess.Id -Force
        Start-Sleep -Seconds 3
        Write-Host "‚úÖ Frontend arr√™t√©" -ForegroundColor Green
    } else {
        Write-Host "‚ÑπÔ∏è  Aucun processus frontend trouv√©" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è  Erreur lors de l'arr√™t du frontend: $($_.Exception.Message)" -ForegroundColor Yellow
}

# Aller dans le r√©pertoire frontend
if (Test-Path "frontend") {
    Set-Location "frontend"
    Write-Host "üìÅ R√©pertoire frontend trouv√©" -ForegroundColor Green
} else {
    Write-Host "‚ùå R√©pertoire frontend non trouv√©" -ForegroundColor Red
    Write-Host "Assurez-vous d'√™tre dans le r√©pertoire racine du projet" -ForegroundColor Yellow
    exit 1
}

# V√©rifier si Node.js est install√©
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js d√©tect√©: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js n'est pas install√© ou n'est pas dans le PATH" -ForegroundColor Red
    Write-Host "Veuillez installer Node.js depuis https://nodejs.org/" -ForegroundColor Yellow
    exit 1
}

# V√©rifier si npm est install√©
try {
    $npmVersion = npm --version
    Write-Host "‚úÖ npm d√©tect√©: $npmVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå npm n'est pas install√© ou n'est pas dans le PATH" -ForegroundColor Red
    exit 1
}

# V√©rifier si package.json existe
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå package.json non trouv√© dans le r√©pertoire frontend" -ForegroundColor Red
    exit 1
}

# Installer les d√©pendances si n√©cessaire
if (-not (Test-Path "node_modules")) {
    Write-Host "üì¶ Installation des d√©pendances..." -ForegroundColor Yellow
    try {
        npm install
        Write-Host "‚úÖ D√©pendances install√©es avec succ√®s" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erreur lors de l'installation des d√©pendances" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚úÖ D√©pendances d√©j√† install√©es" -ForegroundColor Green
}

# V√©rifier que les corrections ont √©t√© appliqu√©es
Write-Host "üîç V√©rification des corrections..." -ForegroundColor Yellow

$correctedFiles = @(
    "src/context/AuthContext.tsx",
    "src/services/api.ts"
)

foreach ($file in $correctedFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file trouv√©" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file manquant" -ForegroundColor Red
    }
}

# V√©rifier la configuration backend
Write-Host "üîç V√©rification de la configuration backend..." -ForegroundColor Yellow
$backendConfig = "backend/src/main/resources/application.yml"
if (Test-Path $backendConfig) {
    $configContent = Get-Content $backendConfig -Raw
    if ($configContent -match "expiration: 86400000") {
        Write-Host "‚úÖ Configuration backend correcte: expiration 24h" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Configuration backend √† v√©rifier" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚ö†Ô∏è  Configuration backend non trouv√©e" -ForegroundColor Yellow
}

# D√©marrer le serveur de d√©veloppement
Write-Host "üöÄ D√©marrage du serveur de d√©veloppement..." -ForegroundColor Yellow
Write-Host "üîß Corrections appliqu√©es:" -ForegroundColor Cyan
Write-Host "   - Validation locale am√©lior√©e avec logs d√©taill√©s" -ForegroundColor Cyan
Write-Host "   - Initialisation optimis√©e pour √©viter la d√©connexion imm√©diate" -ForegroundColor Cyan
Write-Host "   - Validation backend en arri√®re-plan (1s de d√©lai)" -ForegroundColor Cyan
Write-Host "   - Gestion d'erreurs am√©lior√©e pour le d√©codage JWT" -ForegroundColor Cyan
Write-Host "   - Logs d√©taill√©s pour le debugging" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìã Instructions de test:" -ForegroundColor Green
Write-Host "   1. Connectez-vous avec vos identifiants" -ForegroundColor White
Write-Host "   2. V√©rifiez les logs dans la console du navigateur" -ForegroundColor White
Write-Host "   3. Le token doit √™tre stock√© et valid√© localement" -ForegroundColor White
Write-Host "   4. La session doit persister apr√®s rafra√Æchissement" -ForegroundColor White
Write-Host ""
Write-Host "üîç Logs √† surveiller:" -ForegroundColor Yellow
Write-Host "   - 'üîç Validation locale du token...'" -ForegroundColor Gray
Write-Host "   - 'üìã Payload du token:'" -ForegroundColor Gray
Write-Host "   - '‚è∞ Expiration: ...'" -ForegroundColor Gray
Write-Host "   - '‚úÖ Session restaur√©e avec succ√®s'" -ForegroundColor Gray
Write-Host ""
Write-Host "üì± Frontend accessible sur: http://localhost:5173" -ForegroundColor Green
Write-Host "üîÑ Appuyez sur Ctrl+C pour arr√™ter le serveur" -ForegroundColor Gray

try {
    npm run dev
} catch {
    Write-Host "‚ùå Erreur lors du d√©marrage du serveur de d√©veloppement" -ForegroundColor Red
    Write-Host "V√©rifiez que toutes les d√©pendances sont correctement install√©es" -ForegroundColor Yellow
    exit 1
} 