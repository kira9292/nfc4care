import React, { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';
import { apiService } from '../services/api';

interface Doctor {
  id: number;
  email: string;
  nom: string;
  prenom: string;
  specialite?: string;
  numeroRpps?: string;
  role: string;
  dateCreation: string;
  actif: boolean;
}

interface AuthContextType {
  currentDoctor: Doctor | null;
  isAuthenticated: boolean;
  login: (email: string, password: string) => Promise<{ success: boolean; requires2FA?: boolean; error?: string }>;
  verify2FA: (code: string) => Promise<{ success: boolean; error?: string }>;
  logout: () => void;
  logoutAllSessions: () => void;
  loading: boolean;
  refreshAuth: () => Promise<void>;
  clearAuth: () => void;
  validateToken: () => Promise<boolean>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [currentDoctor, setCurrentDoctor] = useState<Doctor | null>(null);
  const [pendingLoginData, setPendingLoginData] = useState<{ email: string; token: string } | null>(null);
  const [loading, setLoading] = useState(true);

  // Validation locale du token (sans appel API)
  const validateTokenLocally = (token: string): boolean => {
    try {
      console.log('üîç Validation locale du token...');
      
      // D√©coder le token JWT
      const payload = JSON.parse(atob(token.split('.')[1]));
      console.log('üìã Payload du token:', payload);
      
      // V√©rifier l'expiration
      const expirationTime = payload.exp * 1000; // Convertir en millisecondes
      const currentTime = Date.now();
      const timeRemaining = expirationTime - currentTime;
      
      console.log('‚è∞ Expiration:', new Date(expirationTime).toLocaleString());
      console.log('‚è∞ Temps restant:', Math.floor(timeRemaining / (1000 * 60)), 'minutes');
      
      if (timeRemaining <= 0) {
        console.log('‚ùå Token expir√© (validation locale)');
        return false;
      }
      
      console.log('‚úÖ Token valide (validation locale)');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de la validation locale du token:', error);
      return false;
    }
  };

  // Validation avec le backend (utilis√©e seulement lors des requ√™tes API)
  const validateTokenWithBackend = async (token: string): Promise<boolean> => {
    try {
      console.log('üîÑ Validation du token avec le backend...');
      
      // Stocker temporairement le token pour la validation
      const originalToken = localStorage.getItem('authToken');
      localStorage.setItem('authToken', token);
      
      const response = await apiService.validateToken();
      
      // Restaurer le token original
      if (originalToken) {
        localStorage.setItem('authToken', originalToken);
      } else {
        localStorage.removeItem('authToken');
      }
      
      if (!response.success) {
        console.log('‚ùå Token invalide (validation backend)');
        return false;
      }
      
      console.log('‚úÖ Token valid√© avec le backend');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur de validation du token avec le backend:', error);
      return false;
    }
  };

  // Validation compl√®te (locale + backend si n√©cessaire)
  const validateToken = async (token: string): Promise<boolean> => {
    // V√©rifier d'abord localement
    if (!validateTokenLocally(token)) {
      return false;
    }
    
    // Validation avec le backend seulement si n√©cessaire
    return await validateTokenWithBackend(token);
  };

  // Initialiser l'authentification au d√©marrage
  useEffect(() => {
    let isInitialized = false;
    
    const initializeAuth = async () => {
      // √âviter les initialisations multiples
      if (isInitialized) {
        console.log('üîÑ Initialisation d√©j√† en cours, ignor√©e');
        return;
      }
      
      isInitialized = true;
      
      try {
        const token = localStorage.getItem('authToken');
        const doctorData = localStorage.getItem('doctorData');
        
        console.log('üîç Initialisation de l\'authentification...');
        console.log('üîç Token trouv√©:', token ? 'Oui' : 'Non');
        console.log('üîç Donn√©es utilisateur trouv√©es:', doctorData ? 'Oui' : 'Non');
        
        if (token && doctorData) {
          console.log('üîÑ Tentative de restauration de session...');
          
          // Validation locale rapide au d√©marrage
          const isLocallyValid = validateTokenLocally(token);
          if (!isLocallyValid) {
            console.log('‚ùå Token expir√© (validation locale), nettoyage de la session');
            clearAuth();
            setLoading(false);
            return;
          }
          
          // Si la validation locale r√©ussit, restaurer imm√©diatement la session
          try {
            const doctor = JSON.parse(doctorData);
            setCurrentDoctor(doctor);
            console.log('‚úÖ Session restaur√©e avec succ√®s pour:', doctor.prenom, doctor.nom);
          } catch (error) {
            console.error('‚ùå Erreur lors du parsing des donn√©es utilisateur:', error);
            clearAuth();
          }
        } else {
          console.log('‚ÑπÔ∏è  Aucune session trouv√©e');
        }
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation de l\'auth:', error);
        clearAuth();
      } finally {
        setLoading(false);
      }
    };

    initializeAuth();
  }, []);

  const clearAuth = () => {
    localStorage.removeItem('authToken');
    localStorage.removeItem('doctorData');
    localStorage.removeItem('pendingLogin');
    setCurrentDoctor(null);
    setPendingLoginData(null);
  };

  const login = async (email: string, password: string): Promise<{ success: boolean; requires2FA?: boolean; error?: string }> => {
    try {
      console.log('üîê D√©but de la tentative de connexion...');
      console.log('üìß Email:', email);
      console.log('üîë Mot de passe fourni:', password ? 'Oui' : 'Non');
      console.log('üì° Appel API login...');
      
      const response = await apiService.login(email, password);
      
      console.log('üì° R√©ponse API re√ßue:', response);
      console.log('üì° R√©ponse success:', response.success);
      console.log('üì° R√©ponse data:', response.data);
      
      if (response.success && response.data) {
        const { token, professionnelId, nom, prenom, email: userEmail, role, specialite, numeroRpps, dateCreation, actif, requires2FA } = response.data;
        
        console.log('‚úÖ Connexion r√©ussie, token re√ßu:', token ? `${token.substring(0, 20)}...` : 'Aucun token');
        console.log('üîë TOKEN COMPLET R√âCUP√âR√â:', token);
        console.log('üìã Donn√©es re√ßues:', {
          professionnelId,
          nom,
          prenom,
          email: userEmail,
          role,
          specialite,
          requires2FA
        });
        
        if (requires2FA) {
          // Stocker temporairement les donn√©es pour la 2FA
          console.log('üîê 2FA requis, stockage temporaire des donn√©es');
          setPendingLoginData({ email, token });
          localStorage.setItem('pendingLogin', JSON.stringify({ email, token }));
          console.log('üíæ Donn√©es 2FA stock√©es dans localStorage');
          console.log('üîç V√©rification 2FA localStorage:', localStorage.getItem('pendingLogin'));
          return { success: true, requires2FA: true };
        }
        
        // Connexion directe sans 2FA
        const doctorData: Doctor = {
          id: professionnelId,
          email: userEmail,
          nom,
          prenom,
          specialite,
          numeroRpps,
          role,
          dateCreation,
          actif
        };
        
        console.log('üíæ Stockage du token et des donn√©es utilisateur');
        console.log('üîë Token √† stocker:', token ? `${token.substring(0, 50)}...` : 'Aucun token');
        console.log('üë§ Donn√©es utilisateur √† stocker:', doctorData);
        
        // V√©rifier que localStorage est disponible
        console.log('üîç V√©rification localStorage disponible:', typeof localStorage !== 'undefined');
        console.log('üîç localStorage accessible:', !!localStorage);
        
        try {
          // Stocker le token
          localStorage.setItem('authToken', token);
          console.log('‚úÖ Token stock√© dans localStorage');
          
          // Stocker les donn√©es utilisateur
          localStorage.setItem('doctorData', JSON.stringify(doctorData));
          console.log('‚úÖ Donn√©es utilisateur stock√©es dans localStorage');
          
          // Attendre un peu pour s'assurer que le stockage est termin√©
          await new Promise(resolve => setTimeout(resolve, 100));
          
          // V√©rifier que le stockage a fonctionn√©
          const storedToken = localStorage.getItem('authToken');
          const storedData = localStorage.getItem('doctorData');
          console.log('üîç V√©rification du stockage:');
          console.log('  - Token stock√©:', storedToken ? 'Oui' : 'Non');
          console.log('  - Donn√©es stock√©es:', storedData ? 'Oui' : 'Non');
          console.log('üîë TOKEN STOCK√â DANS LOCALSTORAGE:', storedToken ? `${storedToken.substring(0, 20)}...` : 'Aucun');
          console.log('üìã DONN√âES STOCK√âES DANS LOCALSTORAGE:', storedData ? 'Pr√©sentes' : 'Absentes');
          
          // V√©rifier que le token stock√© correspond au token re√ßu
          if (storedToken === token) {
            console.log('‚úÖ CONFIRMATION: Token stock√© correspond au token re√ßu');
          } else {
            console.log('‚ùå ERREUR: Token stock√© ne correspond pas au token re√ßu');
            console.log('  - Token re√ßu:', token);
            console.log('  - Token stock√©:', storedToken);
          }
          
          setCurrentDoctor(doctorData);
          console.log('‚úÖ √âtat utilisateur mis √† jour');
          
          // V√©rification finale que tout est bien stock√©
          const finalCheck = localStorage.getItem('authToken') && localStorage.getItem('doctorData');
          if (!finalCheck) {
            console.error('‚ùå √âCHEC: Token ou donn√©es non stock√©s apr√®s la connexion');
            clearAuth();
            return { success: false, error: 'Erreur lors du stockage de la session' };
          }
          
          console.log('‚úÖ V√©rification finale r√©ussie - Session compl√®tement √©tablie');
          console.log('üéâ R√âSUM√â FINAL:');
          console.log('  - Token r√©cup√©r√© du backend: ‚úÖ');
          console.log('  - Token stock√© dans localStorage: ‚úÖ');
          console.log('  - Donn√©es utilisateur stock√©es: ‚úÖ');
          console.log('  - Session √©tablie: ‚úÖ');
          
          // Afficher le contenu complet du localStorage
          console.log('üîç CONTENU COMPLET DU LOCALSTORAGE:');
          Object.keys(localStorage).forEach(key => {
            console.log(`  ${key}:`, localStorage.getItem(key));
          });
          
          return { success: true };
          
        } catch (storageError) {
          console.error('‚ùå ERREUR LORS DU STOCKAGE:', storageError);
          console.error('üìã D√©tails de l\'erreur de stockage:', {
            message: storageError instanceof Error ? storageError.message : 'Erreur inconnue',
            name: storageError instanceof Error ? storageError.name : 'Erreur'
          });
          return { success: false, error: 'Erreur lors du stockage de la session' };
        }
      } else {
        console.log('‚ùå √âchec de connexion:', response.error);
        console.log('üìã R√©ponse compl√®te:', response);
        return { success: false, error: response.error || 'Erreur de connexion' };
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la connexion:', error);
      console.error('üìã D√©tails de l\'erreur:', {
        message: error instanceof Error ? error.message : 'Erreur inconnue',
        stack: error instanceof Error ? error.stack : 'Pas de stack trace',
        name: error instanceof Error ? error.name : 'Erreur'
      });
      return { success: false, error: 'Erreur de connexion au serveur' };
    }
  };

  const verify2FA = async (code: string): Promise<{ success: boolean; error?: string }> => {
    try {
      if (!pendingLoginData) {
        return { success: false, error: 'Donn√©es de connexion manquantes' };
      }

      console.log('üîê V√©rification 2FA avec code:', code);
      const response = await apiService.verify2FA(code, pendingLoginData.token);
      
      if (response.success && response.data) {
        const { professionnelId, nom, prenom, email: userEmail, role, specialite, numeroRpps, dateCreation, actif } = response.data;
        
        const doctorData: Doctor = {
          id: professionnelId,
          email: userEmail,
          nom,
          prenom,
          specialite,
          numeroRpps,
          role,
          dateCreation,
          actif
        };
        
        console.log('üíæ Stockage apr√®s 2FA...');
        localStorage.setItem('authToken', pendingLoginData.token);
        localStorage.setItem('doctorData', JSON.stringify(doctorData));
        localStorage.removeItem('pendingLogin');
        
        // Attendre un peu pour s'assurer que le stockage est termin√©
        await new Promise(resolve => setTimeout(resolve, 100));
        
        // V√©rifier le stockage
        const storedToken = localStorage.getItem('authToken');
        const storedData = localStorage.getItem('doctorData');
        console.log('üîç V√©rification stockage 2FA:');
        console.log('  - Token stock√©:', storedToken ? 'Oui' : 'Non');
        console.log('  - Donn√©es stock√©es:', storedData ? 'Oui' : 'Non');
        
        setCurrentDoctor(doctorData);
        setPendingLoginData(null);
        
        // V√©rification finale que tout est bien stock√©
        const finalCheck = localStorage.getItem('authToken') && localStorage.getItem('doctorData');
        if (!finalCheck) {
          console.error('‚ùå √âCHEC: Token ou donn√©es non stock√©s apr√®s la connexion');
          clearAuth();
          return { success: false, error: 'Erreur lors du stockage de la session' };
        }
        
        console.log('‚úÖ V√©rification finale r√©ussie - Session compl√®tement √©tablie');
        console.log('üéâ R√âSUM√â FINAL:');
        console.log('  - Token r√©cup√©r√© du backend: ‚úÖ');
        console.log('  - Token stock√© dans localStorage: ‚úÖ');
        console.log('  - Donn√©es utilisateur stock√©es: ‚úÖ');
        console.log('  - Session √©tablie: ‚úÖ');
        
        // Afficher le contenu complet du localStorage
        console.log('üîç CONTENU COMPLET DU LOCALSTORAGE:');
        Object.keys(localStorage).forEach(key => {
          console.log(`  ${key}:`, localStorage.getItem(key));
        });
        
        return { success: true };
      } else {
        return { success: false, error: response.error || 'Code 2FA invalide' };
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification 2FA:', error);
      return { success: false, error: 'Erreur lors de la v√©rification' };
    }
  };

  const logout = async () => {
    try {
      await apiService.logout();
    } catch (error) {
      console.error('Erreur lors de la d√©connexion:', error);
    } finally {
      clearAuth();
      console.log('D√©connexion effectu√©e');
    }
  };

  const logoutAllSessions = async () => {
    try {
      await apiService.logoutAllSessions();
    } catch (error) {
      console.error('Erreur lors de la d√©connexion de toutes les sessions:', error);
    } finally {
      clearAuth();
      console.log('D√©connexion de toutes les sessions effectu√©e');
    }
  };

  const refreshAuth = async () => {
    try {
      const token = localStorage.getItem('authToken');
      if (token) {
        const isValid = await validateToken(token);
        if (!isValid) {
          console.log('Token expir√© lors du refresh');
          clearAuth();
        }
      }
    } catch (error) {
      console.error('Erreur lors du refresh de l\'auth:', error);
      clearAuth();
    }
  };

  return (
    <AuthContext.Provider
      value={{
        currentDoctor,
        isAuthenticated: !!currentDoctor,
        login,
        verify2FA,
        logout,
        logoutAllSessions,
        loading,
        refreshAuth,
        clearAuth,
        validateToken: () => validateToken(localStorage.getItem('authToken') || '')
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};