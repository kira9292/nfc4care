# Script de test pour l'authentification NFC4Care
Write-Host "üîê Test d'authentification NFC4Care..." -ForegroundColor Green
Write-Host ""

# Test 1: V√©rifier si le backend r√©pond
Write-Host "Test 1: V√©rification du backend..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/auth/login" -Method POST -Body '{"email":"test","password":"test"}' -ContentType "application/json" -TimeoutSec 10
    Write-Host "‚ùå Erreur: Le backend r√©pond mais l'authentification ne devrait pas fonctionner avec des donn√©es de test" -ForegroundColor Red
} catch {
    if ($_.Exception.Message -like "*400*") {
        Write-Host "‚úÖ Backend r√©pond correctement (400 attendu pour donn√©es invalides)" -ForegroundColor Green
    } elseif ($_.Exception.Message -like "*403*") {
        Write-Host "‚ö†Ô∏è  Backend r√©pond mais erreur 403 - probl√®me de configuration" -ForegroundColor Yellow
    } elseif ($_.Exception.Message -like "*Failed to fetch*") {
        Write-Host "‚ùå Backend non accessible - v√©rifiez qu'il est d√©marr√©" -ForegroundColor Red
        exit 1
    } else {
        Write-Host "‚ùå Erreur inattendue: $($_.Exception.Message)" -ForegroundColor Red
        exit 1
    }
}

# Test 2: Test avec les vraies donn√©es de test
Write-Host ""
Write-Host "Test 2: Authentification avec les donn√©es de test..." -ForegroundColor Yellow
try {
    $loginBody = @{
        email = "doctor@example.com"
        password = "password"
    } | ConvertTo-Json

    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/auth/login" -Method POST -Body $loginBody -ContentType "application/json" -TimeoutSec 10
    
    if ($response.token) {
        Write-Host "‚úÖ Authentification r√©ussie!" -ForegroundColor Green
        Write-Host "Token obtenu: $($response.token.Substring(0, 20))..." -ForegroundColor Cyan
        
        # Test 3: V√©rifier l'acc√®s aux endpoints prot√©g√©s
        Write-Host ""
        Write-Host "Test 3: Acc√®s aux endpoints prot√©g√©s..." -ForegroundColor Yellow
        
        $headers = @{
            "Authorization" = "Bearer $($response.token)"
            "Content-Type" = "application/json"
        }
        
        try {
            $patientsResponse = Invoke-RestMethod -Uri "http://localhost:8080/api/patients" -Method GET -Headers $headers -TimeoutSec 10
            Write-Host "‚úÖ Acc√®s aux patients r√©ussi" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Erreur acc√®s patients: $($_.Exception.Message)" -ForegroundColor Red
        }
        
    } else {
        Write-Host "‚ùå Pas de token dans la r√©ponse" -ForegroundColor Red
    }
} catch {
    if ($_.Exception.Message -like "*401*") {
        Write-Host "‚ùå Identifiants incorrects" -ForegroundColor Red
        Write-Host "V√©rifiez que les donn√©es de test sont pr√©sentes dans la base de donn√©es" -ForegroundColor Yellow
    } elseif ($_.Exception.Message -like "*403*") {
        Write-Host "‚ùå Erreur 403 - Probl√®me de configuration CORS ou s√©curit√©" -ForegroundColor Red
        Write-Host "Red√©marrez le backend avec: .\restart-backend.ps1" -ForegroundColor Yellow
    } else {
        Write-Host "‚ùå Erreur d'authentification: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Test 4: V√©rifier les logs du backend
Write-Host ""
Write-Host "Test 4: V√©rification des logs du backend..." -ForegroundColor Yellow
try {
    $logs = docker-compose logs --tail=20 backend
    Write-Host "Derniers logs du backend:" -ForegroundColor Cyan
    $logs | ForEach-Object { Write-Host "  $_" -ForegroundColor Gray }
} catch {
    Write-Host "Impossible de r√©cup√©rer les logs du backend" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "Tests termin√©s!" -ForegroundColor Green
Read-Host "Press Enter to exit" 