# Script PowerShell pour red√©marrer le frontend avec toutes les corrections
Write-Host "üîß Red√©marrage complet du frontend avec toutes les corrections..." -ForegroundColor Green

# Arr√™ter le frontend s'il tourne
Write-Host "üõë Arr√™t du frontend en cours..." -ForegroundColor Yellow
try {
    # Chercher le processus Node.js qui tourne sur le port 5173
    $nodeProcess = Get-NetTCPConnection -LocalPort 5173 -ErrorAction SilentlyContinue | 
                   Where-Object { $_.State -eq "Listen" } | 
                   ForEach-Object { Get-Process -Id $_.OwningProcess -ErrorAction SilentlyContinue } |
                   Where-Object { $_.ProcessName -eq "node" }
    
    if ($nodeProcess) {
        Write-Host "‚úÖ Processus Node.js trouv√©, arr√™t en cours..." -ForegroundColor Green
        Stop-Process -Id $nodeProcess.Id -Force
        Start-Sleep -Seconds 3
        Write-Host "‚úÖ Frontend arr√™t√©" -ForegroundColor Green
    } else {
        Write-Host "‚ÑπÔ∏è  Aucun processus frontend trouv√©" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è  Erreur lors de l'arr√™t du frontend: $($_.Exception.Message)" -ForegroundColor Yellow
}

# Aller dans le r√©pertoire frontend
if (Test-Path "frontend") {
    Set-Location "frontend"
    Write-Host "üìÅ R√©pertoire frontend trouv√©" -ForegroundColor Green
} else {
    Write-Host "‚ùå R√©pertoire frontend non trouv√©" -ForegroundColor Red
    Write-Host "Assurez-vous d'√™tre dans le r√©pertoire racine du projet" -ForegroundColor Yellow
    exit 1
}

# V√©rifier si Node.js est install√©
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js d√©tect√©: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js n'est pas install√© ou n'est pas dans le PATH" -ForegroundColor Red
    Write-Host "Veuillez installer Node.js depuis https://nodejs.org/" -ForegroundColor Yellow
    exit 1
}

# V√©rifier si npm est install√©
try {
    $npmVersion = npm --version
    Write-Host "‚úÖ npm d√©tect√©: $npmVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå npm n'est pas install√© ou n'est pas dans le PATH" -ForegroundColor Red
    exit 1
}

# V√©rifier si package.json existe
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå package.json non trouv√© dans le r√©pertoire frontend" -ForegroundColor Red
    exit 1
}

# Installer les d√©pendances si n√©cessaire
if (-not (Test-Path "node_modules")) {
    Write-Host "üì¶ Installation des d√©pendances..." -ForegroundColor Yellow
    try {
        npm install
        Write-Host "‚úÖ D√©pendances install√©es avec succ√®s" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erreur lors de l'installation des d√©pendances" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚úÖ D√©pendances d√©j√† install√©es" -ForegroundColor Green
}

# V√©rifier que tous les composants ont √©t√© cr√©√©s
Write-Host "üîç V√©rification des composants..." -ForegroundColor Yellow

$requiredFiles = @(
    "src/components/ui/ErrorBoundary.tsx",
    "src/components/ui/ErrorNotification.tsx",
    "src/components/ui/TokenExpirationModal.tsx",
    "src/hooks/useErrorHandler.ts",
    "src/hooks/useTokenExpiration.ts"
)

$allFilesExist = $true
foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file trouv√©" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file manquant" -ForegroundColor Red
        $allFilesExist = $false
    }
}

if (-not $allFilesExist) {
    Write-Host "‚ùå Certains composants sont manquants. Veuillez les cr√©er d'abord." -ForegroundColor Red
    exit 1
}

# V√©rifier les pages corrig√©es
Write-Host "üîç V√©rification des pages corrig√©es..." -ForegroundColor Yellow

$correctedPages = @(
    "src/pages/Dashboard.tsx",
    "src/pages/SearchPatient.tsx",
    "src/pages/History.tsx",
    "src/App.tsx"
)

foreach ($file in $correctedPages) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file trouv√©" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file manquant" -ForegroundColor Red
    }
}

# D√©marrer le serveur de d√©veloppement
Write-Host "üöÄ D√©marrage du serveur de d√©veloppement..." -ForegroundColor Yellow
Write-Host "üîß Corrections appliqu√©es:" -ForegroundColor Cyan
Write-Host "   - ErrorBoundary cr√©√© pour g√©rer les erreurs globales" -ForegroundColor Cyan
Write-Host "   - ErrorNotification cr√©√© pour les notifications" -ForegroundColor Cyan
Write-Host "   - TokenExpirationModal cr√©√© pour l'expiration des tokens" -ForegroundColor Cyan
Write-Host "   - useErrorHandler hook cr√©√©" -ForegroundColor Cyan
Write-Host "   - useTokenExpiration hook cr√©√©" -ForegroundColor Cyan
Write-Host "   - Imports corrig√©s dans App.tsx" -ForegroundColor Cyan
Write-Host "   - Pages Dashboard, SearchPatient, History corrig√©es" -ForegroundColor Cyan
Write-Host "   - Ancienne gestion d'erreur supprim√©e" -ForegroundColor Cyan
Write-Host ""
Write-Host "üì± Frontend accessible sur: http://localhost:5173" -ForegroundColor Green
Write-Host "üîÑ Appuyez sur Ctrl+C pour arr√™ter le serveur" -ForegroundColor Gray

try {
    npm run dev
} catch {
    Write-Host "‚ùå Erreur lors du d√©marrage du serveur de d√©veloppement" -ForegroundColor Red
    Write-Host "V√©rifiez que toutes les d√©pendances sont correctement install√©es" -ForegroundColor Yellow
    exit 1
} 